/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs ("libkOmegaSST_BOR_frozen_R_OF7.so");

application     pimpleFoam;

startFrom       startTime;

startTime       240;

stopAt          endTime;

endTime         1000;

deltaT          0.001;

writeControl    adjustableRunTime; 

writeInterval   10; 

purgeWrite      0;

writeFormat     ascii;

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   8;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           1;

functions
{

/*
cuttingPlane_raw
{

    type                      surfaces;
    functionObjectLibs        ("libsampling.so");
    outputControl             outputTime;
    // outputControl          timeStep;
    outputInterval            1;

    //surfaceFormat raw;
    surfaceFormat             vtk;
    fields                    (T U k epsilon nut);  //( rho T U );
 
    interpolationScheme       cellPoint;
 
    surfaces
    (
        raw_Z_normal_plane
        {
            type                cuttingPlane;
            planeType           pointAndNormal;
            pointAndNormalDict
            {
                basePoint       (0 0 0);  // Notet that the plane does not match up with the mesh
                normalVector    (0 0 1);
            }
            interpolate         true;
        }
    );
} 

vorticity1
{
    type            vorticity;
    libs            ("libfieldFunctionObjects.so");
    writeControl    writeTime;
}

Q1
{
    type            Q;
    libs            ("libfieldFunctionObjects.so");
    writeControl    writeTime;
}
   
vorticity1
{
    type            vorticity;
    libs            ("libfieldFunctionObjects.so");
    writeControl    writeTime;
}

yPlus
{
    type            yPlusLES;
    libs            ("libfieldFunctionObjects.so");
    writeControl    writeTime;
}
*/

//   #include "probes"
   #include "fieldAverage"

}

// ************************************************************************* //
