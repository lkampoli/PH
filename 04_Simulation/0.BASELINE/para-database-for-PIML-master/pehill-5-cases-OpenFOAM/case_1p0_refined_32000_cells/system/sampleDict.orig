/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    system;
    object      sampleDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs            ("libsampling.so");

type sets;
//type surfaces;
// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
surfaceFormat vtk;
surlineFaceFormat vtk;

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPoint;

// Fields to sample.
fields
(
    U
    //UDNS
    R
    k
    //Tau
    //TauDNS
    //divTau_Breuer
    //divTau_IC
    //TauDNS_Breuer
);

// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      lineCell            one point per cell, inbetween two face intersections
//      lineCell     combination of face and lineCell
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, lineCell, lineCell : start and end coordinate
//      uniform: extra number of sampling points
//      curve, cloud: list of coordinates
sets
(
    line_x0
    {
        type        lineCell;
        axis        y;
        start       (0.00001 -1  0.05);
        end         (0.00001 4  0.05);
    }
//    line_x0p5
//    {
//        type        lineCell;
//        axis        y;
//        start       (0.5 -1  0.05);
//        end         (0.5 4  0.05);
//    }
    line_x1
    {
        type        lineCell;
        axis        y;
        start       (1.00001 -1  0.05);
        end         (1.00001 3.036  0.05);
    }
    line_x2
    {
        type        lineCell;
        axis        y;
        start       (2.00001 -1  0.05);
        end         (2.00001 3.036  0.05);
    }
    line_x3
    {
        type        lineCell;
        axis        y;
        start       (3 1e-3  0.05);
        end         (3 3.036  0.05);
    }
    line_x4
    {
        type        lineCell;
        axis        y;
        start       (4.00001 2e-5  0.05);
        end         (4.00001 3.03  0.05);
    }
    line_x5
    {
        type        lineCell;
        axis        y;
        start       (5 -1  0.05);
        end         (5 3.03  0.05);
    }
    line_x6
    {
        type        lineCell;
        axis        y;
        start       (6 -1  0.05);
        end         (6 3.036  0.05);
    }
    line_x7
    {
        type        lineCell;
        axis        y;
        start       (7 -1  0.05);
        end         (7 3.036  0.05);
    }
    line_x8
    {
        type        lineCell;
        axis        y;
        start       (8 -1  0.05);
        end         (8 3.036  0.05);
    }
);

// Surface sampling definition: choice of
//      plane : values on plane defined by point, normal.
//      patch : values on patch.
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated
//surfaces
//();

surfaces
(
//    bottomWall
//    {
//        type patch;
//        patches ("defaultFaces");
//        interpolate true;
//        triangulate false;
//    }

//    Z_0_Plane
//    {
//        type                cuttingPlane;
//        planeType           pointAndNormal;
//        pointAndNormalDict
//        {
//            basePoint       (0 0 0);  
//            normalVector    (0 0 1);
//        }
//        interpolate         true;
//        }

//    X_0_Plane
//        {
//            type                cuttingPlane;
//            planeType           pointAndNormal;
//            pointAndNormalDict
//            {
//                basePoint       (4.5 0 0);  
//                normalVector    (1 0 0);
//            }
//            interpolate         true;
//        }
//    
//    Y_0_Plane
//        {
//            type                cuttingPlane;
//            planeType           pointAndNormal;
//            pointAndNormalDict
//            {
//                basePoint       (4.5 0 0);  
//                normalVector    (4.5 1 0);
//            }
//            interpolate         true;
//        }
//
);

// *********************************************************************** //
